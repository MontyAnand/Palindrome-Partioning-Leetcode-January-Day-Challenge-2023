PROBLEM STATEMENT:
Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]

SOLUTION CODE :
 bool check(int i,int j,vector<vector<bool>>&dp){
       return dp[i][j];
   }
void count(string &s,int left,int right,int n,vector<string>&a,vector<vector<string>>&ans,vector<vector<bool>>&dp){
    if(right>n)return;
    if(right==n-1){
        if(check(left,right,dp)){
            a.push_back(s.substr(left,right-left+1));
            ans.push_back(a);
            a.pop_back();
            return;
        }
        return;
    }
    count(s,left,right+1,n,a,ans,dp);
    if(check(left,right,dp)){
        a.push_back(s.substr(left,right-left+1));
        count(s,right+1,right+1,n,a,ans,dp);
        a.pop_back();
        return;
    }
}
   
    vector<vector<string>> partition(string s) {
        int n = s.length();
        vector<vector<bool>>dp(n,vector<bool>(n,false));
        for(int i=0;i<n;i++)dp[i][i]=true;
        for(int i=0;i<n-1;i++){
            if(s[i]==s[i+1])dp[i][i+1]=true;
        }
        int k=3;
        while(k<=n){
            for(int i=0;i<n;i++){
                if(k+i-1>=n)break;
                if(s[i]==s[k+i-1]){
                    if(dp[i+1][k+i-2])dp[i][k+i-1]=true;
                }
            }
            k++;
        }
        vector<vector<string>>ans;
        if(dp[0][n-1]){
            vector<string>a(1,s);
            ans.push_back(a);
        }
        for(int i=0;i<n-1;i++){
            vector<string>a;
            if(dp[0][i]){
                a.push_back(s.substr(0,i+1));
                count(s,i+1,i+1,n,a,ans,dp);
            }
        }
        return ans;
    }
};
